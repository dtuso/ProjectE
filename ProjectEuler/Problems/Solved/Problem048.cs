using System;
using System.Diagnostics;
using ProjectEuler.Helpers;


namespace ProjectEuler.Problems
{
	class Problem048
	{
		//The series, 1^1 + 2^2 + 3^3 + ... + 10^10 = 10405071317.
		//Find the last ten digits of the series, 1^1 + 2^2 + 3^3 + ... + 1000^1000.


		//Start of Main 2/28/2008 11:53:59 AM
		//In 00:00:00.0041554, for sum up to 1^1, result was: 1
		//In 00:00:00.0000069, for sum up to 2^2, result was: 5
		//In 00:00:00.0000114, for sum up to 3^3, result was: 32
		//In 00:00:00.0000204, for sum up to 4^4, result was: 288
		//In 00:00:00.0000411, for sum up to 5^5, result was: 3413
		//In 00:00:00.0007266, for sum up to 10^10, result was: 10405071317
		//In 00:00:00.2149502, for sum up to 100^100, result was: 100371115746176445351701210713361941528546861949073514542015172437236580034634746971244943788132460150776779198800002366059871900041784732217539059306483834977865973576751345853385981719448969027641920
		//In 00:08:38.3308584, for sum up to 1000^1000, result was: 1000368199144695177095375011227646795567793680622934654583760988100234910747716194381428659099527845945869942643191290894720342979906407679647259860434238468038326040809691037615370376237713648510063115732951461774246705584266865759601815843666442832284556880313114548151539190975398485496645576513465858582712336401166221956188173449531674102688908321764663020306699770408625340766091595022791379368098369306375602813856646358773751558775213
		//46022579657984658333400734935862434233933298133457123788880928310334876026136017595081560917946402687100524365210998086355214201424290343406856093657323107934219403186441391810123815105650926739351576039284247250139159407346300152184381107376702171102630750469573346789782186690664846982834660741296739580179779168360983472243224195284535256468186824036956956619282555532355807806199752768998384886337478678933158156525205917261433942460098614325923316758337107036262555453185205416611714885822950858
		//15896143375944632775543805183809213012188363271022314073322011097401025802164692983317669206196460837907328076273606144280851715650062897285086889642267996471925829240585895307506745783853655618785595896857562256923489147469228109139156198347541176483580358141286702941585656699420877362863909422415472260150044713306301130720427042889050421426281937719185945743022021472011884863459131908337523074769660105474239288710631187830260363813190390520082520720579336667129189462333127936970940742241878720
		//45970976444309242782187738320257490080824330074991698698239561125811127607863900355221737846690567707344074494145266662103839812840216303448476913957072355732716627098372245223046792919747259113157425824064858331415400943278213042954635053574045209984512221264241903550178416824551412548637590007779082539288247751653566899882749594405895102587985539527709493510049546445427265617478399107188238681771215904234119392247489751079085948055945098805617963722928469554263782217625160428008228845552540344
		//49486019526711518709222776619575390721112664615014061474423397476527347561996431185285861416781966834012473048771016200679352998575882065367727437956331349545452663271872348233949482575982107640169431604345651211793793545646352146302119772669498355892913235757618859497751663073421286386945616420552553676731129813718251149464946366307375921921305682356166777609373942574288393071260996216346408803882656913203216069263720618308594298797368458427649178484311547207790040169259569411927355351102599126
		//54460393662889217435813332000837171052411715046068835434188620240475521770552634244695012989059019381582459386336941050248151666798136891566683411977134750943899048871267944689018938504750500112052257424555556257505602132303879103379839503332450206532389891155070138829562777638807956872108571964938931426567131059662754221446059880589396006036042269214014020965192942504886702979833963532794604531423755422678819891974817897806789550937631936586036908984748269769065444739780174557203679299817960230
		//41785852626797271283465789498383642350667978127819110846700
		//End of Main (00:08:38.5602648) 2/28/2008 12:02:38 PM

		//Start of Main 10/31/2008 12:05:41 PM
		//In 00:00:00.0021822, for sum up to 1^1, result was: 1
		//In 00:00:00.0014756, for sum up to 2^2, result was: 5
		//In 00:00:00.0009677, for sum up to 3^3, result was: 32
		//In 00:00:00.0003264, for sum up to 4^4, result was: 288
		//In 00:00:00.0010251, for sum up to 5^5, result was: 3413
		//In 00:00:00.0027250, for sum up to 10^10, result was: 10405071317
		//In 00:00:00.0242153, for sum up to 100^100, result was: 1003711157461764453517012107133619415285468619490735145420151724372365800346347469712449437881324601507767791988000023660598719000417847322175390593064
		//83834977865973576751345853385981719448969027641920
		//In 00:00:00.5961847, for sum up to 1000^1000, result was: 10003681991446951770953750112276467955677936806229346545837609881002349107477161943814286590995278459458699426431912908947203429799064076796472598604
		//342384680383260408096910376153703762377136485100631157329514617742467055842668657596018158436664428322845568803131145481515391909753984854966455765134658585827123364011662219561881734495316741026889083217646
		//630203066997704086253407660915950227913793680983693063756028138566463587737515587752134602257965798465833340073493586243423393329813345712378888092831033487602613601759508156091794640268710052436521099808635
		//521420142429034340685609365732310793421940318644139181012381510565092673935157603928424725013915940734630015218438110737670217110263075046957334678978218669066484698283466074129673958017977916836098347224322
		//419528453525646818682403695695661928255553235580780619975276899838488633747867893315815652520591726143394246009861432592331675833710703626255545318520541661171488582295085815896143375944632775543805183809213
		//012188363271022314073322011097401025802164692983317669206196460837907328076273606144280851715650062897285086889642267996471925829240585895307506745783853655618785595896857562256923489147469228109139156198347
		//541176483580358141286702941585656699420877362863909422415472260150044713306301130720427042889050421426281937719185945743022021472011884863459131908337523074769660105474239288710631187830260363813190390520082
		//520720579336667129189462333127936970940742241878720459709764443092427821877383202574900808243300749916986982395611258111276078639003552217378466905677073440744941452666621038398128402163034484769139570723557
		//327166270983722452230467929197472591131574258240648583314154009432782130429546350535740452099845122212642419035501784168245514125486375900077790825392882477516535668998827495944058951025879855395277094935100
		//495464454272656174783991071882386817712159042341193922474897510790859480559450988056179637229284695542637822176251604280082288455525403444948601952671151870922277661957539072111266461501406147442339747652734
		//756199643118528586141678196683401247304877101620067935299857588206536772743795633134954545266327187234823394948257598210764016943160434565121179379354564635214630211977266949835589291323575761885949775166307
		//342128638694561642055255367673112981371825114946494636630737592192130568235616677760937394257428839307126099621634640880388265691320321606926372061830859429879736845842764917848431154720779004016925956941192
		//735535110259912654460393662889217435813332000837171052411715046068835434188620240475521770552634244695012989059019381582459386336941050248151666798136891566683411977134750943899048871267944689018938504750500
		//112052257424555556257505602132303879103379839503332450206532389891155070138829562777638807956872108571964938931426567131059662754221446059880589396006036042269214014020965192942504886702979833963532794604531
		//42375542267881989197481789780678955093763193658603690898474826976906544473978017455720367929981796023041785852626797271283465789498383642350667978127819110846700
		//End of Main (00:00:00.7472367) 10/31/2008 12:05:42 PM



		public static void Solve(int countTo)
		{
			BigInteger sum = 0;
			Stopwatch sw = new Stopwatch();
			sw.Start();
			for (BigInteger i = 1; i <= countTo; i++)
			{
				//BigInteger p = BigInteger.Pow(i, i);
				BigInteger p = i.Pow(i);
				//Console.WriteLine("{0} {1}",i, p);
				sum += p;
			}
			sw.Stop();
			Console.WriteLine("In {0}, for sum up to {1}^{1}, result was: {2}", sw.Elapsed, countTo, sum);

		}
	}
}
